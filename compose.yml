services:
  cde:
    image: cde/${CDE_IMAGE_NAME:?}
    environment:
      - GIT_HUB_SSH_KEY
    build:
      context: ./${PRIMARY_CDE:?}/ctx
      args:
        - USER=${USER:?}
        - CPU_ARCH
        - BASE_IMAGE_NAME
        - BASE_IMAGE_TAG
      labels:
        # This has to be array instead of map. (With map, variables in key are not expanded)
        - cde.${PRIMARY_CDE:?}=true
    hostname: ${CDE_HOSTNAME:?}
    extra_hosts:
      - ${CDE_HOSTNAME:?}:127.0.0.1
    volumes:
      - type: volume
        source: cde_cache
        target: /home/${USER:?}/.cache
      - type: volume
        source: cde_local_share
        target: /home/${USER:?}/.local/share
      # bind socket file so that the same docker can be used inside containers
      # (actually docker client command cannot connect to daemon without this,
      # even when daemon is started inside container)
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      # Binding below two timezone file sync timezone of containers to the host machine
      - type: bind
        source: /etc/timezone
        target: /etc/timezone
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
      - type: bind
        source: "~"
        target: /home/${USER:?}/hosthome
      # Bind volume `workspace` direcory instead of symlinking so that relative
      # path of bind volume inside CDE container does not result in error
      - type: bind
        source: ~/workspace
        target: /home/${USER:?}/workspace
      - type: bind
        source: ~/.vim
        target: /home/${USER:?}/.vim
      - type: bind
        source: ~/.local/share/nvim/site
        target: /home/${USER:?}/.local/share/nvim/site
    network_mode: "host"
volumes:
  cde_cache:
    labels:
      prune: false
  cde_local_share:
    labels:
      prune: false
