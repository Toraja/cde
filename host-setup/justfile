set shell := ['/usr/bin/bash', '-c']

export PATH :=  env_var('HOME') / '.local/bin:' +  env_var('PATH')
export ANSIBLE_BECOME_PASSWORD_FILE := '.ansible_become_password'

default:
	@just --list --unsorted

[private]
@echored args:
	echo -e "\e[0;31m{{args}}\e[0;0m"

# Things that required to perform other targets
prerequisite:
	sudo -E apt-get update
	sudo -E apt-get install --no-install-recommends --yes python3-pip
	pip install ansible
	ansible-playbook playbooks/prerequisite.yml

bashrc:
	grep -q '# Added by host setup' ~/.bashrc || cat ./bashrc >> ~/.bashrc

github_repo_subpath := 'personal.github.com/Toraja'
github_host_user := 'personal.github.com:Toraja'
toybox_repo_url := 'git@' + github_host_user / 'toybox.git'
cde_repo_url := 'git@' + github_host_user / 'cde.git'

# Clone necessary repositories, setup gitconfig and create symlinks to the repositories
repositories:
	./github-latest-release-installer.sh x-motemen ghq ghq_linux_amd64.zip /tmp/ghq_linux_amd64.zip \
		&& unzip /tmp/ghq_linux_amd64.zip -d /tmp/ \
		&& mkdir -p ~/.local/bin/ \
		&& mv /tmp/ghq_linux_amd64/ghq ~/.local/bin/ \
		&& rm -rdf /tmp/ghq_linux_amd64*
	git clone {{toybox_repo_url}} ~/toybox
	cat ./gitconfig > ~/.gitconfig
	ghq_root=$(~/.local/bin/ghq root) \
		&& mkdir -p ${ghq_root}/{{github_repo_subpath}} \
		&& mv ~/toybox ${ghq_root}/{{github_repo_subpath}} \
		&& ln -s ${ghq_root}/{{github_repo_subpath}}/toybox ~/toybox \
		&& mv ~/cde ${ghq_root}/{{github_repo_subpath}} \
		&& ln -s ${ghq_root}/{{github_repo_subpath}}/cde ~/cde
	mkdir -p ~/.config/gh

fish:
	sudo -E apt-get update
	sudo -E apt-get install --no-install-recommends --yes software-properties-common
	sudo -E apt-add-repository --yes ppa:fish-shell/release-3
	sudo -E apt-get update
	sudo -E apt-get install --no-install-recommends --yes fish
	sudo usermod --shell $(which fish) $(whoami) || just echored "Failed to change user's shell to fish. It might not be possible in this environment."
	@# fish -i -c 'exit' <- trying to let fish to setup fish fixtures (e.g. ~/.config/fish) but this does not work
	grep -q '# Added by host setup' ~/.config/fish/config.fish &> /dev/null || mkdir -p ~/.config/fish/ && cat ./config.fish >> ~/.config/fish/config.fish
	mkdir -p ~/.config/fish/conf.d/ && ln -s ~/toybox/fish/conf.d/* ~/.config/fish/conf.d/
	ln -s ~/toybox/fish/functions ~/.config/fish/myfuncs

vim:
	ansible-playbook playbooks/vim.yml

tmux:
	sudo -E apt-get update
	sudo -E apt-get install --no-install-recommends --yes tmux
	git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm
	mkdir -p ~/.config/tmux/ && echo 'source ~/toybox/tmux/tmux.conf' > ~/.config/tmux/tmux.conf
	~/.config/tmux/plugins/tpm/bin/install_plugins

docker: docker-clean docker-add-repository docker-install-engine docker-setup

docker-clean:
	sudo -E apt-get remove docker docker.io containerd runc
	@# docker-engine might not exist as package
	-sudo -E apt-get remove docker-engine

docker-add-repository:
	sudo -E apt-get update
	sudo -E apt-get install --no-install-recommends --yes apt-transport-https ca-certificates curl gnupg lsb-release
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo -E gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
	@# check CPU architecure and exit if it does not match
	@if [ $(uname -m) != 'x86_64' ]; then echo the CPU architecure is not supported; exit 1; fi
	echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
		$(lsb_release -cs) stable" | sudo -E tee /etc/apt/sources.list.d/docker.list > /dev/null

docker-install-engine: # prerequisites commented out for reusability -- docker-clean docker-add-repository
	sudo -E apt-get update
	sudo -E apt-get install --no-install-recommends --yes docker-ce docker-ce-cli containerd.io docker-compose-plugin
	./github-latest-release-installer.sh -x docker buildx 'buildx-v.*.linux-amd64'  ~/.docker/cli-plugins/docker-buildx

docker-setup:
	sudo -E usermod -aG docker $(whoami)
	mkdir -p ~/.docker && cat ~/toybox/docker/config.json > ~/.docker/config.json

# Run this recipe to setup on WSL
docker-wsl:
	@# This is needed for Ubuntu 22.04
	@# Source:
	@# - https://dev.to/felipecrs/simply-run-docker-on-wsl2-3o8
	@# - https://medium.com/twodigits/install-docker-on-wsl-2-with-vpn-support-to-replace-docker-for-windows-45b8e200e171
	sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
	sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy

taskwarrior:
	ansible-playbook playbooks/taskwarrior.yml

misc:
	ansible-playbook playbooks/misc.yml

test:
	export UID && docker compose run --rm test

build-testenv:
	export UID && docker compose build test

renew-test-base:
	docker pull ubuntu:latest
